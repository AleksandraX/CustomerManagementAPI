// <auto-generated />
using System;
using CustomerManagementPortal.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CustomerManagementPortal.Entities.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20201022202854_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CustomerManagementPortal.Entities.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            City = "Gdynia",
                            Country = "Poland",
                            Street = "Filipkowskiego 20A/22",
                            ZipCode = "81578"
                        },
                        new
                        {
                            Id = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            City = "Chwaszczyno",
                            Country = "Poland",
                            Street = "Buraczana",
                            ZipCode = "80209"
                        },
                        new
                        {
                            Id = new Guid("021ca3c1-0deb-4afd-ae94-2159a8479811"),
                            City = "Gdańsk",
                            Country = "Poland",
                            Street = "Kolarska 8E",
                            ZipCode = "80-180"
                        });
                });

            modelBuilder.Entity("CustomerManagementPortal.Entities.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("CustomerManagementPortal.Entities.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc003aa0-8f29-4be3-a623-69fc9136e9d2"),
                            AddressId = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            Age = 5,
                            Email = "sisi.kaczuszka@wp.pl",
                            Gender = 1,
                            LastName = "Murlik",
                            Name = "Sisi",
                            PhoneNumber = "666666666"
                        },
                        new
                        {
                            Id = new Guid("daa46f02-4e4e-4342-bd74-0714b77ed535"),
                            AddressId = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            Age = 3,
                            Email = "amor.buziaczek@onet.pl",
                            Gender = 0,
                            LastName = "Murlik",
                            Name = "Amor",
                            PhoneNumber = "555-555-555"
                        },
                        new
                        {
                            Id = new Guid("e0219757-b2e6-46b3-855b-335f2d9a94cc"),
                            AddressId = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            Age = 17,
                            Email = "prywatny.murlik@gmail.com",
                            Gender = 1,
                            LastName = "Murlik",
                            Name = "Paula",
                            PhoneNumber = "537843591"
                        },
                        new
                        {
                            Id = new Guid("5b686772-258f-412c-9c00-4d29fdef1fb7"),
                            AddressId = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            Age = 21,
                            Email = "kacper.berganski@onet.com",
                            Gender = 0,
                            LastName = "Bergański",
                            Name = "Kacper",
                            PhoneNumber = "720860430"
                        },
                        new
                        {
                            Id = new Guid("c6e963ae-ca9e-4bcb-9c13-a58c2f7b0ffa"),
                            AddressId = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            Age = 0,
                            Email = "",
                            Gender = 1,
                            LastName = "Bergańska",
                            Name = "Daria",
                            PhoneNumber = ""
                        },
                        new
                        {
                            Id = new Guid("46b94aac-2f6e-4b0f-b0ae-f18549b96b36"),
                            AddressId = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            Age = 28,
                            Email = "aleksandra.czerwa@gmail.com",
                            Gender = 1,
                            LastName = "Czerwińska",
                            Name = "Aleksandra",
                            PhoneNumber = "506139325"
                        },
                        new
                        {
                            Id = new Guid("a5fe7e0b-dfe3-466a-8e4b-865a0c7ed374"),
                            AddressId = new Guid("021ca3c1-0deb-4afd-ae94-2159a8479811"),
                            Age = 20,
                            Email = "j.czerwinska@o2.pl",
                            Gender = 1,
                            LastName = "Czerwińska",
                            Name = "Julia",
                            PhoneNumber = "512899657"
                        });
                });

            modelBuilder.Entity("CustomerManagementPortal.Entities.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("CustomerManagementPortal.Entities.Models.Customer", b =>
                {
                    b.HasOne("CustomerManagementPortal.Entities.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerManagementPortal.Entities.Models.Employee", b =>
                {
                    b.HasOne("CustomerManagementPortal.Entities.Models.Address", null)
                        .WithMany("Employees")
                        .HasForeignKey("AddressId");

                    b.HasOne("CustomerManagementPortal.Entities.Models.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
